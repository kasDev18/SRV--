<?php

namespace App\Filament\Resources;

use App\Filament\Resources\OrdersResource\Pages;
use App\Filament\Resources\OrdersResource\RelationManagers;
use App\Helpers\FileHelper;
use App\Models\Customers;
use App\Models\Orders;
use App\Models\Position;
use Filament\Forms;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\ToggleButtons;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;
use HusamTariq\FilamentDatabaseSchedule\Filament\Columns\ActionGroup;

class EndedOrdersResource extends Resource
{
    protected static ?string $model = Orders::class;

    protected static ?string $navigationIcon = 'heroicon-o-no-symbol';

    protected static ?int $navigationSort = 2;


    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table->defaultPaginationPageOption(50)
            ->columns(ActiveOrdersResource::getTableSchema())
            ->filters([

            ])
            ->actions([
                ActionGroup::make([
//                    Action::make('View Candidates')
//                        ->icon('heroicon-o-eye')
//                        ->color('info')
//                        ->modalSubmitAction(false)
//                        ->modalCancelAction(false)
//                        ->modalContent(function ($record) {
//                            return View::make('livewire.livewire_wrapper.assigned-candidate-table-wrapper', [
//                                'orderId' => [$record->id],
//                            ]);
//                        })
//                        ->modalWidth('7xl'),
//                    EditAction::make()
//                        ->form(self::getFormSchema())
//                        ->slideOver()
//                        ->modalWidth('md'),
                    DeleteAction::make()
                        ->tooltip(__('admin_order.delete'))
                        ->requiresConfirmation()
                ])
            ])
            ->defaultSort('created_at','desc')
            ->bulkActions([
//                Tables\Actions\BulkActionGroup::make([
//                    Tables\Actions\DeleteBulkAction::make(),
//                ]),
            ]);
    }

    public static function getFormSchema()
    {
        return [
            TextInput::make('topic')
                ->required(),
            Select::make('customer_id')
                ->options(Customers::all()->pluck('company_name','id'))
                ->required(),
            TextInput::make('week_number')
                ->numeric()
                ->maxValue(52)
                ->minValue(1)
                ->required(),
            TextInput::make('year')
                ->required(),
            Select::make('position_id')
                ->options(Position::all()->pluck('name','id'))
                ->required(),
            TextInput::make('city')
                ->required(),
            TextInput::make('demand')
                ->numeric()
                ->required(),
            Textarea::make('description')
                ->required(),
            Forms\Components\ToggleButtons::make('is_active')
                ->label('Status')
                ->grouped()
                ->colors(FileHelper::boolean_colors())
                ->default(1)
                ->options([
                    '1' => 'Active',
                    '0' => 'Inactive',
                ]),
            Hidden::make('candidate_id')
                ->default(0),
            Hidden::make('is_deleted')
                ->default(0)

        ];
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListEndedOrders::route('/'),
//            'create' => Pages\CreateOrders::route('/create'),
//            'edit' => Pages\EditOrders::route('/{record}/edit'),
        ];
    }

    public static function getNavigationLabel(): string
    {
        return __('admin_settings.ended');
    }

    public static function getNavigationGroup(): ?string
    {
        return __('admin_settings.orders');
    }

    public static function getPluralLabel(): ?string
    {
        return __('admin_settings.orders'); // TODO: Change the autogenerated stub
    }
}
