<?php

namespace App\Filament\Resources;

use App\Filament\Resources\OffersResource\Pages;
use App\Filament\Resources\OffersResource\RelationManagers;
use App\Models\Cities;
use App\Models\Contracts;
use App\Models\Countries;
use App\Models\Currency;
use App\Models\Customers;
use App\Models\Language;
use App\Models\Offers;
use App\Models\Position;
use App\Models\Sectors;
use Filament\Forms;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\ToggleButtons;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use HusamTariq\FilamentDatabaseSchedule\Filament\Columns\ActionGroup;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Mohamedsabil83\FilamentFormsTinyeditor\Components\TinyEditor;
use PHPUnit\Framework\Constraint\Count;

class InactiveOffersResource extends Resource
{
    protected static ?string $model = Offers::class;

    protected static ?string $navigationIcon = 'heroicon-o-x-circle';
    protected static ?string $navigationLabel = 'Not Active Offers';
    protected static ?string $navigationGroup = 'Offers';
    protected static ?int $navigationSort = 3;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([]);
    }

    public static function table(Table $table): Table
    {
        return $table->defaultPaginationPageOption(50)
            ->columns(OffersResource::getTableSchema())
            ->filters([
                //
            ])
            ->actions([
                ActionGroup::make([
                    Tables\Actions\EditAction::make()
                        ->slideOver()
                        ->form(OffersResource::getFormSchema())
                        ->mutateFormDataUsing(function (array $data): array {
                            $country = Countries::find($data['country_id'])->name;
                            $city = Cities::find($data['city_id'])->name;
                            $address = $country . '+' . $city;
                            $address = preg_replace('/ /', '+', $address);

                            $key = ENV('GOOGLE_MAP_KEY');
                            $url = "https://maps.googleapis.com/maps/api/geocode/json?address=$address&key=$key";

                            $geocode_stats = file_get_contents($url);
                            $output_deals = json_decode($geocode_stats);

                            if( count($output_deals->results ) ) {
                                $result = $output_deals->results[0];
                                $latitude = $result->geometry->location->lat;
                                $longitude = $result->geometry->location->lng;

                                $data['latitude'] = $latitude;
                                $data['longitude'] = $longitude;
                            }else{
                                $data['latitude'] = 0.0;
                                $data['longitude'] = 0.0;
                            }

                            return $data;
                        }),
                    Tables\Actions\DeleteAction::make()
                ]),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListInactiveOffers::route('/'),
        ];
    }

    public static function getNavigationLabel(): string
    {
        return __('admin_settings.not_active_offers');
    }

    public static function getNavigationGroup(): ?string
    {
        return __('admin_settings.offers');
    }

    public static function getPluralLabel(): ?string
    {
        return __('admin_settings.offers'); // TODO: Change the autogenerated stub
    }
}
